# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dungeonhack
else:
    import _dungeonhack

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def addHudMessage(message):
    return _dungeonhack.addHudMessage(message)

def getLastButtonPressed():
    return _dungeonhack.getLastButtonPressed()

def showMessage(message):
    return _dungeonhack.showMessage(message)

def showYesNoMessage(message):
    return _dungeonhack.showYesNoMessage(message)

def playMusic(musicfile):
    return _dungeonhack.playMusic(musicfile)

def playSound(soundfile, gain):
    return _dungeonhack.playSound(soundfile, gain)
class LocationWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wrappedPtr = property(_dungeonhack.LocationWrapper_wrappedPtr_get, _dungeonhack.LocationWrapper_wrappedPtr_set)

    def isNull(self):
        return _dungeonhack.LocationWrapper_isNull(self)

    def setInUse(self, newVal):
        return _dungeonhack.LocationWrapper_setInUse(self, newVal)

    def getName(self):
        return _dungeonhack.LocationWrapper_getName(self)

    def getInUse(self):
        return _dungeonhack.LocationWrapper_getInUse(self)

    def getIsLoaded(self):
        return _dungeonhack.LocationWrapper_getIsLoaded(self)

    def getLocID(self):
        return _dungeonhack.LocationWrapper_getLocID(self)

    def getZoneX(self):
        return _dungeonhack.LocationWrapper_getZoneX(self)

    def getZoneY(self):
        return _dungeonhack.LocationWrapper_getZoneY(self)

    def __init__(self):
        _dungeonhack.LocationWrapper_swiginit(self, _dungeonhack.new_LocationWrapper())
    __swig_destroy__ = _dungeonhack.delete_LocationWrapper

# Register LocationWrapper in _dungeonhack:
_dungeonhack.LocationWrapper_swigregister(LocationWrapper)

class QuestActorWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dungeonhack.QuestActorWrapper_swiginit(self, _dungeonhack.new_QuestActorWrapper())
    __swig_destroy__ = _dungeonhack.delete_QuestActorWrapper
    wrappedPtr = property(_dungeonhack.QuestActorWrapper_wrappedPtr_get, _dungeonhack.QuestActorWrapper_wrappedPtr_set)

    def isNull(self):
        return _dungeonhack.QuestActorWrapper_isNull(self)

    def setDieScriptFunction(self, newFunction):
        return _dungeonhack.QuestActorWrapper_setDieScriptFunction(self, newFunction)

    def setHurtScriptFunction(self, newFunction):
        return _dungeonhack.QuestActorWrapper_setHurtScriptFunction(self, newFunction)

    def setAggroScriptFunction(self, newFunction):
        return _dungeonhack.QuestActorWrapper_setAggroScriptFunction(self, newFunction)

# Register QuestActorWrapper in _dungeonhack:
_dungeonhack.QuestActorWrapper_swigregister(QuestActorWrapper)

class MonsterActorWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dungeonhack.MonsterActorWrapper_swiginit(self, _dungeonhack.new_MonsterActorWrapper())
    __swig_destroy__ = _dungeonhack.delete_MonsterActorWrapper
    wrappedPtr = property(_dungeonhack.MonsterActorWrapper_wrappedPtr_get, _dungeonhack.MonsterActorWrapper_wrappedPtr_set)

    def isNull(self):
        return _dungeonhack.MonsterActorWrapper_isNull(self)

    def getHealth(self):
        return _dungeonhack.MonsterActorWrapper_getHealth(self)

    def getFatigue(self):
        return _dungeonhack.MonsterActorWrapper_getFatigue(self)

    def getMagicka(self):
        return _dungeonhack.MonsterActorWrapper_getMagicka(self)

    def getSpeedMod(self):
        return _dungeonhack.MonsterActorWrapper_getSpeedMod(self)

    def getXPosition(self):
        return _dungeonhack.MonsterActorWrapper_getXPosition(self)

    def getYPosition(self):
        return _dungeonhack.MonsterActorWrapper_getYPosition(self)

    def getZPosition(self):
        return _dungeonhack.MonsterActorWrapper_getZPosition(self)

    def getIsInvisible(self):
        return _dungeonhack.MonsterActorWrapper_getIsInvisible(self)

    def setHealth(self, newVal):
        return _dungeonhack.MonsterActorWrapper_setHealth(self, newVal)

    def setFatigue(self, newVal):
        return _dungeonhack.MonsterActorWrapper_setFatigue(self, newVal)

    def setMagicka(self, newVal):
        return _dungeonhack.MonsterActorWrapper_setMagicka(self, newVal)

    def setSpeedMod(self, newVal):
        return _dungeonhack.MonsterActorWrapper_setSpeedMod(self, newVal)

    def setIsInvisible(self, newVal):
        return _dungeonhack.MonsterActorWrapper_setIsInvisible(self, newVal)

    def setPosition(self, x, y, z):
        return _dungeonhack.MonsterActorWrapper_setPosition(self, x, y, z)

    def getPosition(self, x, y, z):
        return _dungeonhack.MonsterActorWrapper_getPosition(self, x, y, z)

    def addImpulse(self, x, y, z, strength):
        return _dungeonhack.MonsterActorWrapper_addImpulse(self, x, y, z, strength)

# Register MonsterActorWrapper in _dungeonhack:
_dungeonhack.MonsterActorWrapper_swigregister(MonsterActorWrapper)

class PlayerWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dungeonhack.PlayerWrapper_swiginit(self, _dungeonhack.new_PlayerWrapper())
    __swig_destroy__ = _dungeonhack.delete_PlayerWrapper
    wrappedPtr = property(_dungeonhack.PlayerWrapper_wrappedPtr_get, _dungeonhack.PlayerWrapper_wrappedPtr_set)

    def isNull(self):
        return _dungeonhack.PlayerWrapper_isNull(self)

    def startJumpEvent(self):
        return _dungeonhack.PlayerWrapper_startJumpEvent(self)

    def wieldWeapon(self):
        return _dungeonhack.PlayerWrapper_wieldWeapon(self)

    def sheathWeapon(self):
        return _dungeonhack.PlayerWrapper_sheathWeapon(self)

    def getHealth(self):
        return _dungeonhack.PlayerWrapper_getHealth(self)

    def getFatigue(self):
        return _dungeonhack.PlayerWrapper_getFatigue(self)

    def getMagicka(self):
        return _dungeonhack.PlayerWrapper_getMagicka(self)

    def getSpeedMod(self):
        return _dungeonhack.PlayerWrapper_getSpeedMod(self)

    def getXPosition(self):
        return _dungeonhack.PlayerWrapper_getXPosition(self)

    def getYPosition(self):
        return _dungeonhack.PlayerWrapper_getYPosition(self)

    def getZPosition(self):
        return _dungeonhack.PlayerWrapper_getZPosition(self)

    def getIsInvisible(self):
        return _dungeonhack.PlayerWrapper_getIsInvisible(self)

    def setHealth(self, newVal):
        return _dungeonhack.PlayerWrapper_setHealth(self, newVal)

    def setFatigue(self, newVal):
        return _dungeonhack.PlayerWrapper_setFatigue(self, newVal)

    def setMagicka(self, newVal):
        return _dungeonhack.PlayerWrapper_setMagicka(self, newVal)

    def setSpeedMod(self, newVal):
        return _dungeonhack.PlayerWrapper_setSpeedMod(self, newVal)

    def setIsInvisible(self, newVal):
        return _dungeonhack.PlayerWrapper_setIsInvisible(self, newVal)

    def setPosition(self, x, y, z):
        return _dungeonhack.PlayerWrapper_setPosition(self, x, y, z)

    def getPosition(self, x, y, z):
        return _dungeonhack.PlayerWrapper_getPosition(self, x, y, z)

    def addImpulse(self, x, y, z, strength):
        return _dungeonhack.PlayerWrapper_addImpulse(self, x, y, z, strength)

    def getZoneX(self):
        return _dungeonhack.PlayerWrapper_getZoneX(self)

    def getZoneY(self):
        return _dungeonhack.PlayerWrapper_getZoneY(self)

    def getIsOutdoor(self):
        return _dungeonhack.PlayerWrapper_getIsOutdoor(self)

    def isAtLocation(self):
        return _dungeonhack.PlayerWrapper_isAtLocation(self)

    def getCurrentLoc(self):
        return _dungeonhack.PlayerWrapper_getCurrentLoc(self)

    def createWeapon(self, weaponID):
        return _dungeonhack.PlayerWrapper_createWeapon(self, weaponID)

# Register PlayerWrapper in _dungeonhack:
_dungeonhack.PlayerWrapper_swigregister(PlayerWrapper)

class FireEntityWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, z, size=1.0):
        _dungeonhack.FireEntityWrapper_swiginit(self, _dungeonhack.new_FireEntityWrapper(x, y, z, size))
    __swig_destroy__ = _dungeonhack.delete_FireEntityWrapper
    wrappedPtr = property(_dungeonhack.FireEntityWrapper_wrappedPtr_get, _dungeonhack.FireEntityWrapper_wrappedPtr_set)

    def isNull(self):
        return _dungeonhack.FireEntityWrapper_isNull(self)

    def setName(self, newVal):
        return _dungeonhack.FireEntityWrapper_setName(self, newVal)

    def getName(self):
        return _dungeonhack.FireEntityWrapper_getName(self)

    def setPosition(self, x, y, z):
        return _dungeonhack.FireEntityWrapper_setPosition(self, x, y, z)

    def getPosition(self, x, y, z):
        return _dungeonhack.FireEntityWrapper_getPosition(self, x, y, z)

# Register FireEntityWrapper in _dungeonhack:
_dungeonhack.FireEntityWrapper_swigregister(FireEntityWrapper)

class QuestWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dungeonhack.QuestWrapper_swiginit(self, _dungeonhack.new_QuestWrapper())
    __swig_destroy__ = _dungeonhack.delete_QuestWrapper
    wrappedPtr = property(_dungeonhack.QuestWrapper_wrappedPtr_get, _dungeonhack.QuestWrapper_wrappedPtr_set)

    def isNull(self):
        return _dungeonhack.QuestWrapper_isNull(self)

    def Start(self):
        return _dungeonhack.QuestWrapper_Start(self)

    def End(self):
        return _dungeonhack.QuestWrapper_End(self)

    def changeStage(self, stage):
        return _dungeonhack.QuestWrapper_changeStage(self, stage)

    def isQuestVariableSet(self, var):
        return _dungeonhack.QuestWrapper_isQuestVariableSet(self, var)

    def getQuestVariable(self, var):
        return _dungeonhack.QuestWrapper_getQuestVariable(self, var)

    def setQuestVariable(self, var, newVal):
        return _dungeonhack.QuestWrapper_setQuestVariable(self, var, newVal)

    def getStage(self):
        return _dungeonhack.QuestWrapper_getStage(self)

    def getName(self):
        return _dungeonhack.QuestWrapper_getName(self)

    def addQuestMonster(self, type, loc):
        return _dungeonhack.QuestWrapper_addQuestMonster(self, type, loc)

# Register QuestWrapper in _dungeonhack:
_dungeonhack.QuestWrapper_swigregister(QuestWrapper)


def addQuest(questName, scriptFile):
    return _dungeonhack.addQuest(questName, scriptFile)

def questExists(name):
    return _dungeonhack.questExists(name)

def getQuest(name):
    return _dungeonhack.getQuest(name)

def getFreeDungeonLoc():
    return _dungeonhack.getFreeDungeonLoc()

def getFreeInnLoc():
    return _dungeonhack.getFreeInnLoc()

def getLocFromID(locID):
    return _dungeonhack.getLocFromID(locID)

def getPlayer():
    return _dungeonhack.getPlayer()


