# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,7,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dungeonhack', [dirname(__file__)])
        except ImportError:
            import _dungeonhack
            return _dungeonhack
        if fp is not None:
            try:
                _mod = imp.load_module('_dungeonhack', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _dungeonhack = swig_import_helper()
    del swig_import_helper
else:
    import _dungeonhack
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def addHudMessage(*args):
  return _dungeonhack.addHudMessage(*args)
addHudMessage = _dungeonhack.addHudMessage

def getLastButtonPressed():
  return _dungeonhack.getLastButtonPressed()
getLastButtonPressed = _dungeonhack.getLastButtonPressed

def showMessage(*args):
  return _dungeonhack.showMessage(*args)
showMessage = _dungeonhack.showMessage

def showYesNoMessage(*args):
  return _dungeonhack.showYesNoMessage(*args)
showYesNoMessage = _dungeonhack.showYesNoMessage

def playMusic(*args):
  return _dungeonhack.playMusic(*args)
playMusic = _dungeonhack.playMusic

def playSound(*args):
  return _dungeonhack.playSound(*args)
playSound = _dungeonhack.playSound
class LocationWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocationWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocationWrapper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wrappedPtr"] = _dungeonhack.LocationWrapper_wrappedPtr_set
    __swig_getmethods__["wrappedPtr"] = _dungeonhack.LocationWrapper_wrappedPtr_get
    if _newclass:wrappedPtr = _swig_property(_dungeonhack.LocationWrapper_wrappedPtr_get, _dungeonhack.LocationWrapper_wrappedPtr_set)
    def isNull(self): return _dungeonhack.LocationWrapper_isNull(self)
    def setInUse(self, *args): return _dungeonhack.LocationWrapper_setInUse(self, *args)
    def getName(self): return _dungeonhack.LocationWrapper_getName(self)
    def getInUse(self): return _dungeonhack.LocationWrapper_getInUse(self)
    def getIsLoaded(self): return _dungeonhack.LocationWrapper_getIsLoaded(self)
    def getLocID(self): return _dungeonhack.LocationWrapper_getLocID(self)
    def getZoneX(self): return _dungeonhack.LocationWrapper_getZoneX(self)
    def getZoneY(self): return _dungeonhack.LocationWrapper_getZoneY(self)
    def __init__(self): 
        this = _dungeonhack.new_LocationWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dungeonhack.delete_LocationWrapper
    __del__ = lambda self : None;
LocationWrapper_swigregister = _dungeonhack.LocationWrapper_swigregister
LocationWrapper_swigregister(LocationWrapper)

class QuestActorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuestActorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuestActorWrapper, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _dungeonhack.new_QuestActorWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dungeonhack.delete_QuestActorWrapper
    __del__ = lambda self : None;
    __swig_setmethods__["wrappedPtr"] = _dungeonhack.QuestActorWrapper_wrappedPtr_set
    __swig_getmethods__["wrappedPtr"] = _dungeonhack.QuestActorWrapper_wrappedPtr_get
    if _newclass:wrappedPtr = _swig_property(_dungeonhack.QuestActorWrapper_wrappedPtr_get, _dungeonhack.QuestActorWrapper_wrappedPtr_set)
    def isNull(self): return _dungeonhack.QuestActorWrapper_isNull(self)
    def setDieScriptFunction(self, *args): return _dungeonhack.QuestActorWrapper_setDieScriptFunction(self, *args)
    def setHurtScriptFunction(self, *args): return _dungeonhack.QuestActorWrapper_setHurtScriptFunction(self, *args)
    def setAggroScriptFunction(self, *args): return _dungeonhack.QuestActorWrapper_setAggroScriptFunction(self, *args)
QuestActorWrapper_swigregister = _dungeonhack.QuestActorWrapper_swigregister
QuestActorWrapper_swigregister(QuestActorWrapper)

class MonsterActorWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MonsterActorWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MonsterActorWrapper, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _dungeonhack.new_MonsterActorWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dungeonhack.delete_MonsterActorWrapper
    __del__ = lambda self : None;
    __swig_setmethods__["wrappedPtr"] = _dungeonhack.MonsterActorWrapper_wrappedPtr_set
    __swig_getmethods__["wrappedPtr"] = _dungeonhack.MonsterActorWrapper_wrappedPtr_get
    if _newclass:wrappedPtr = _swig_property(_dungeonhack.MonsterActorWrapper_wrappedPtr_get, _dungeonhack.MonsterActorWrapper_wrappedPtr_set)
    def isNull(self): return _dungeonhack.MonsterActorWrapper_isNull(self)
    def getHealth(self): return _dungeonhack.MonsterActorWrapper_getHealth(self)
    def getFatigue(self): return _dungeonhack.MonsterActorWrapper_getFatigue(self)
    def getMagicka(self): return _dungeonhack.MonsterActorWrapper_getMagicka(self)
    def getSpeedMod(self): return _dungeonhack.MonsterActorWrapper_getSpeedMod(self)
    def getXPosition(self): return _dungeonhack.MonsterActorWrapper_getXPosition(self)
    def getYPosition(self): return _dungeonhack.MonsterActorWrapper_getYPosition(self)
    def getZPosition(self): return _dungeonhack.MonsterActorWrapper_getZPosition(self)
    def getIsInvisible(self): return _dungeonhack.MonsterActorWrapper_getIsInvisible(self)
    def setHealth(self, *args): return _dungeonhack.MonsterActorWrapper_setHealth(self, *args)
    def setFatigue(self, *args): return _dungeonhack.MonsterActorWrapper_setFatigue(self, *args)
    def setMagicka(self, *args): return _dungeonhack.MonsterActorWrapper_setMagicka(self, *args)
    def setSpeedMod(self, *args): return _dungeonhack.MonsterActorWrapper_setSpeedMod(self, *args)
    def setIsInvisible(self, *args): return _dungeonhack.MonsterActorWrapper_setIsInvisible(self, *args)
    def setPosition(self, *args): return _dungeonhack.MonsterActorWrapper_setPosition(self, *args)
    def getPosition(self, *args): return _dungeonhack.MonsterActorWrapper_getPosition(self, *args)
    def addImpulse(self, *args): return _dungeonhack.MonsterActorWrapper_addImpulse(self, *args)
MonsterActorWrapper_swigregister = _dungeonhack.MonsterActorWrapper_swigregister
MonsterActorWrapper_swigregister(MonsterActorWrapper)

class PlayerWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerWrapper, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _dungeonhack.new_PlayerWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dungeonhack.delete_PlayerWrapper
    __del__ = lambda self : None;
    __swig_setmethods__["wrappedPtr"] = _dungeonhack.PlayerWrapper_wrappedPtr_set
    __swig_getmethods__["wrappedPtr"] = _dungeonhack.PlayerWrapper_wrappedPtr_get
    if _newclass:wrappedPtr = _swig_property(_dungeonhack.PlayerWrapper_wrappedPtr_get, _dungeonhack.PlayerWrapper_wrappedPtr_set)
    def isNull(self): return _dungeonhack.PlayerWrapper_isNull(self)
    def startJumpEvent(self): return _dungeonhack.PlayerWrapper_startJumpEvent(self)
    def wieldWeapon(self): return _dungeonhack.PlayerWrapper_wieldWeapon(self)
    def sheathWeapon(self): return _dungeonhack.PlayerWrapper_sheathWeapon(self)
    def getHealth(self): return _dungeonhack.PlayerWrapper_getHealth(self)
    def getFatigue(self): return _dungeonhack.PlayerWrapper_getFatigue(self)
    def getMagicka(self): return _dungeonhack.PlayerWrapper_getMagicka(self)
    def getSpeedMod(self): return _dungeonhack.PlayerWrapper_getSpeedMod(self)
    def getXPosition(self): return _dungeonhack.PlayerWrapper_getXPosition(self)
    def getYPosition(self): return _dungeonhack.PlayerWrapper_getYPosition(self)
    def getZPosition(self): return _dungeonhack.PlayerWrapper_getZPosition(self)
    def getIsInvisible(self): return _dungeonhack.PlayerWrapper_getIsInvisible(self)
    def setHealth(self, *args): return _dungeonhack.PlayerWrapper_setHealth(self, *args)
    def setFatigue(self, *args): return _dungeonhack.PlayerWrapper_setFatigue(self, *args)
    def setMagicka(self, *args): return _dungeonhack.PlayerWrapper_setMagicka(self, *args)
    def setSpeedMod(self, *args): return _dungeonhack.PlayerWrapper_setSpeedMod(self, *args)
    def setIsInvisible(self, *args): return _dungeonhack.PlayerWrapper_setIsInvisible(self, *args)
    def setPosition(self, *args): return _dungeonhack.PlayerWrapper_setPosition(self, *args)
    def getPosition(self, *args): return _dungeonhack.PlayerWrapper_getPosition(self, *args)
    def addImpulse(self, *args): return _dungeonhack.PlayerWrapper_addImpulse(self, *args)
    def getZoneX(self): return _dungeonhack.PlayerWrapper_getZoneX(self)
    def getZoneY(self): return _dungeonhack.PlayerWrapper_getZoneY(self)
    def getIsOutdoor(self): return _dungeonhack.PlayerWrapper_getIsOutdoor(self)
    def isAtLocation(self): return _dungeonhack.PlayerWrapper_isAtLocation(self)
    def getCurrentLoc(self): return _dungeonhack.PlayerWrapper_getCurrentLoc(self)
    def createWeapon(self, *args): return _dungeonhack.PlayerWrapper_createWeapon(self, *args)
PlayerWrapper_swigregister = _dungeonhack.PlayerWrapper_swigregister
PlayerWrapper_swigregister(PlayerWrapper)

class FireEntityWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FireEntityWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FireEntityWrapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dungeonhack.new_FireEntityWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dungeonhack.delete_FireEntityWrapper
    __del__ = lambda self : None;
    __swig_setmethods__["wrappedPtr"] = _dungeonhack.FireEntityWrapper_wrappedPtr_set
    __swig_getmethods__["wrappedPtr"] = _dungeonhack.FireEntityWrapper_wrappedPtr_get
    if _newclass:wrappedPtr = _swig_property(_dungeonhack.FireEntityWrapper_wrappedPtr_get, _dungeonhack.FireEntityWrapper_wrappedPtr_set)
    def isNull(self): return _dungeonhack.FireEntityWrapper_isNull(self)
    def setName(self, *args): return _dungeonhack.FireEntityWrapper_setName(self, *args)
    def getName(self): return _dungeonhack.FireEntityWrapper_getName(self)
    def setPosition(self, *args): return _dungeonhack.FireEntityWrapper_setPosition(self, *args)
    def getPosition(self, *args): return _dungeonhack.FireEntityWrapper_getPosition(self, *args)
FireEntityWrapper_swigregister = _dungeonhack.FireEntityWrapper_swigregister
FireEntityWrapper_swigregister(FireEntityWrapper)

class QuestWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuestWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QuestWrapper, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _dungeonhack.new_QuestWrapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dungeonhack.delete_QuestWrapper
    __del__ = lambda self : None;
    __swig_setmethods__["wrappedPtr"] = _dungeonhack.QuestWrapper_wrappedPtr_set
    __swig_getmethods__["wrappedPtr"] = _dungeonhack.QuestWrapper_wrappedPtr_get
    if _newclass:wrappedPtr = _swig_property(_dungeonhack.QuestWrapper_wrappedPtr_get, _dungeonhack.QuestWrapper_wrappedPtr_set)
    def isNull(self): return _dungeonhack.QuestWrapper_isNull(self)
    def Start(self): return _dungeonhack.QuestWrapper_Start(self)
    def End(self): return _dungeonhack.QuestWrapper_End(self)
    def changeStage(self, *args): return _dungeonhack.QuestWrapper_changeStage(self, *args)
    def isQuestVariableSet(self, *args): return _dungeonhack.QuestWrapper_isQuestVariableSet(self, *args)
    def getQuestVariable(self, *args): return _dungeonhack.QuestWrapper_getQuestVariable(self, *args)
    def setQuestVariable(self, *args): return _dungeonhack.QuestWrapper_setQuestVariable(self, *args)
    def getStage(self): return _dungeonhack.QuestWrapper_getStage(self)
    def getName(self): return _dungeonhack.QuestWrapper_getName(self)
    def addQuestMonster(self, *args): return _dungeonhack.QuestWrapper_addQuestMonster(self, *args)
QuestWrapper_swigregister = _dungeonhack.QuestWrapper_swigregister
QuestWrapper_swigregister(QuestWrapper)


def addQuest(*args):
  return _dungeonhack.addQuest(*args)
addQuest = _dungeonhack.addQuest

def questExists(*args):
  return _dungeonhack.questExists(*args)
questExists = _dungeonhack.questExists

def getQuest(*args):
  return _dungeonhack.getQuest(*args)
getQuest = _dungeonhack.getQuest

def getFreeDungeonLoc():
  return _dungeonhack.getFreeDungeonLoc()
getFreeDungeonLoc = _dungeonhack.getFreeDungeonLoc

def getFreeInnLoc():
  return _dungeonhack.getFreeInnLoc()
getFreeInnLoc = _dungeonhack.getFreeInnLoc

def getLocFromID(*args):
  return _dungeonhack.getLocFromID(*args)
getLocFromID = _dungeonhack.getLocFromID

def getPlayer():
  return _dungeonhack.getPlayer()
getPlayer = _dungeonhack.getPlayer


